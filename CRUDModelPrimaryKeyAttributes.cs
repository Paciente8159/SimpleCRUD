using System;
using System.Linq;
using System.Reflection;
using System.ComponentModel;

namespace SimpleCRUD
{
    /// <summary>
    /// Defines a CRUDModelPK attribute to decorate the primary key in a database table/document model definition. 
    /// </summary>
    [AttributeUsage(AttributeTargets.Property , Inherited = false, AllowMultiple = false)]
    public sealed class CRUDModelPKAttribute : Attribute
    {
        /// <summary>
        /// Gets or sets the AutoIncrement property value.
        /// </summary>
        /// <value>A boolean value.</value>
        public bool AutoIncrement {get; set;}

        /// <summary>
        /// Evaluates the Type of the model property decorated with the <see cref="CRUDModelPKAttribute"/>.
        /// </summary>
        /// <typeparam name="T">The type of the model.</typeparam>
        public static PropertyInfo GetPKProperty<T>() where T : class, new()
        {
            Type type = typeof(T);
            PropertyInfo[] properties = type.GetProperties();
            PropertyInfo property = properties.FirstOrDefault(p => p.GetCustomAttributes(typeof(CRUDModelPKAttribute), false).Any());
            if (property != null)
            {
                return property;
            }

            return null;
        }

        /// <summary>
        /// Evaluates if the primary key is an auto increment field.
        /// </summary>
        /// <typeparam name="T">The type of the model.</typeparam>
        public static bool IsAutoGenerated<T>() where T : class, new()
        {
            Type type = typeof(T);
            PropertyInfo[] properties = type.GetProperties();
            PropertyInfo property = properties.FirstOrDefault(p => p.GetCustomAttributes(typeof(CRUDModelPKAttribute), false).Any());
            
            if (property != null)
            {
                CRUDModelPKAttribute att = (CRUDModelPKAttribute)property.GetCustomAttribute(typeof(CRUDModelPKAttribute));
                return att.AutoIncrement;
            }

            return false;
        }

        /// <summary>
        /// Gets the Value of the model property decorated with the <see cref="CRUDModelPKAttribute"/>
        /// </summary>
        /// <typeparam name="T">The type of the model.</typeparam>
        /// <param name="item">The model object.</param>
        /// <returns>Returns an object with the value of the model prymary key property.</returns>
        public static object GetPKValue<T>(T item) where T : class, new()
        {
            Type type = typeof(T);
            PropertyInfo[] properties = type.GetProperties();
            PropertyInfo property = properties.FirstOrDefault(p => p.GetCustomAttributes(typeof(CRUDModelPKAttribute), false).Any());
            if (property != null)
            {
                return property.GetValue(item);
            }

            return null;
        }

        /// <summary>
        /// Evaluates if the the model primary key property value matches a given value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="item">The model object.</param>
        /// <param name="key">The value of the key to compare to the model object primary key.</param>
        /// <returns>Returns true if match, otherwise returns false.</returns>
        public static bool PKEquals<T>(T item, object key) where T : class, new()
        {
            Type type = typeof(T);
            PropertyInfo[] properties = type.GetProperties();
            PropertyInfo property = properties.FirstOrDefault(p => p.GetCustomAttributes(typeof(CRUDModelPKAttribute), false).Any());
            if (property != null)
            {
                return property.GetValue(item).Equals(key);
            }

            return false;
        }
    }
}